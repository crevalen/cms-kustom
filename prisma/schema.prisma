// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_POSTGRES_PRISMA_URL")
  directUrl = env("DATABASE_POSTGRES_URL_NON_POOLING")
}

enum Role {
  ADMIN
  EDITOR
  AUTHOR
}

model User {
  id           String    @id @default(cuid())
  username     String    @unique
  passwordHash String
  role         Role      @default(AUTHOR)
  posts        Post[]
  sessions     Session[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// -- MODEL BARU & UPDATE --

model Post {
  id    String @id @default(cuid())
  slug  String @unique
  title String
  content String @db.Text
  published Boolean @default(false)

  // Kolom SEO
  metaTitle       String?
  metaDescription String?
  focusKeyword    String?
  
  // Kolom SEO Lanjutan
  ogTitle         String?
  ogDescription   String?
  canonicalUrl    String?
  noIndex         Boolean @default(false)
  noFollow        Boolean @default(false)
  schemaType      String?
  publishedAt     DateTime? // <-- Field yang hilang ada di sini

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relasi
  author          User        @relation(fields: [authorId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  authorId        String
  categories      Category[]
  tags            Tag[]
  comments        Comment[]
  featuredImage   Media?      @relation("PostToFeaturedImage", fields: [featuredImageId], references: [id], onDelete: SetNull)
  featuredImageId String?     @unique
  ogImage         Media?      @relation("PostToOgImage", fields: [ogImageId], references: [id], onDelete: SetNull)
  ogImageId       String?     @unique
}

model Category {
  id    String @id @default(cuid())
  slug  String @unique
  name  String @unique
  posts Post[]
  updatedAt DateTime @default(now()) @updatedAt
}

model Tag {
  id    String @id @default(cuid())
  slug  String @unique
  name  String @unique
  posts Post[]
  updatedAt DateTime @default(now()) @updatedAt
}

model Media {
  id        String   @id @default(cuid())
  key       String   @unique
  url       String   @unique
  altText   String?
  fileType  String
  size      Int
  createdAt DateTime @default(now())

  // Relasi balik yang disesuaikan
  PostAsFeaturedImage Post? @relation("PostToFeaturedImage")
  PostAsOgImage       Post? @relation("PostToOgImage")
}

// MODEL BARU UNTUK PENGATURAN
model Setting {
  key      String @id
  value    String @db.Text
  updatedAt DateTime @updatedAt
}

model Page {
  id              String   @id @default(cuid())
  slug            String   @unique
  title           String
  content         String   @db.Text
  published       Boolean  @default(false)
  metaTitle       String?
  metaDescription String?
  schemaType      String? 
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Comment {
  id          String   @id @default(cuid())
  content     String   @db.Text
  authorName  String
  authorEmail String
  isApproved  Boolean  @default(false)
  createdAt   DateTime @default(now())

  // Relasi ke Postingan
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  // Relasi untuk balasan (nested comments)
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  parentId String?
  replies  Comment[] @relation("CommentReplies")
}